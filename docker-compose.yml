version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: docketify-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: docketify
      POSTGRES_USER: docketify_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_in_production}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docketify_user -d docketify"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Docketify Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: docketify-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://docketify_user:${DB_PASSWORD:-secure_password_change_in_production}@database:5432/docketify
      - SESSION_SECRET=${SESSION_SECRET:-generate_secure_secret_minimum_32_chars}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TZ=UTC
    volumes:
      - uploads_data:/app/uploads
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session storage (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: docketify-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy (production setup)
  nginx:
    image: nginx:alpine
    container_name: docketify-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  default:
    driver: bridge